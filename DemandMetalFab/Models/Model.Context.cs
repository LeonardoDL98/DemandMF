//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemandMetalFab.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DemandDBEntities : DbContext
    {
        public DemandDBEntities()
            : base("name=DemandDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MF_Customer> MF_Customer { get; set; }
        public virtual DbSet<MF_DemandMonth> MF_DemandMonth { get; set; }
        public virtual DbSet<MF_DemandYear> MF_DemandYear { get; set; }
        public virtual DbSet<MF_Machine> MF_Machine { get; set; }
        public virtual DbSet<MF_OpMachine> MF_OpMachine { get; set; }
        public virtual DbSet<MF_Part> MF_Part { get; set; }
        public virtual DbSet<MF_Project> MF_Project { get; set; }
        public virtual DbSet<MF_Sector> MF_Sector { get; set; }
        public virtual DbSet<MF_WorkDate> MF_WorkDate { get; set; }
        public virtual DbSet<MF_Demand> MF_Demand { get; set; }
        public virtual DbSet<MF_DemandDate> MF_DemandDate { get; set; }
        public virtual DbSet<MF_Proceso> MF_Proceso { get; set; }
        public virtual DbSet<MF_ExcelProceso> MF_ExcelProceso { get; set; }
        public virtual DbSet<MF_TipoUsuario> MF_TipoUsuario { get; set; }
        public virtual DbSet<MF_Usuario> MF_Usuario { get; set; }
        public virtual DbSet<MF_Bitacora> MF_Bitacora { get; set; }
    
        public virtual ObjectResult<MF_DatosDemanda_Result> MF_DatosDemanda(Nullable<double> industrial, Nullable<double> medical, Nullable<double> provee1, Nullable<double> provee2, Nullable<int> mes, Nullable<int> año)
        {
            var industrialParameter = industrial.HasValue ?
                new ObjectParameter("industrial", industrial) :
                new ObjectParameter("industrial", typeof(double));
    
            var medicalParameter = medical.HasValue ?
                new ObjectParameter("medical", medical) :
                new ObjectParameter("medical", typeof(double));
    
            var provee1Parameter = provee1.HasValue ?
                new ObjectParameter("provee1", provee1) :
                new ObjectParameter("provee1", typeof(double));
    
            var provee2Parameter = provee2.HasValue ?
                new ObjectParameter("provee2", provee2) :
                new ObjectParameter("provee2", typeof(double));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("año", año) :
                new ObjectParameter("año", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MF_DatosDemanda_Result>("MF_DatosDemanda", industrialParameter, medicalParameter, provee1Parameter, provee2Parameter, mesParameter, añoParameter);
        }
    
        public virtual int MF_DeleteDemand(Nullable<int> idwork)
        {
            var idworkParameter = idwork.HasValue ?
                new ObjectParameter("idwork", idwork) :
                new ObjectParameter("idwork", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MF_DeleteDemand", idworkParameter);
        }
    
        public virtual int MF_DeleteDemandMonthly(Nullable<int> idwork, Nullable<int> mes, Nullable<int> anio)
        {
            var idworkParameter = idwork.HasValue ?
                new ObjectParameter("idwork", idwork) :
                new ObjectParameter("idwork", typeof(int));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            var anioParameter = anio.HasValue ?
                new ObjectParameter("anio", anio) :
                new ObjectParameter("anio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MF_DeleteDemandMonthly", idworkParameter, mesParameter, anioParameter);
        }
    
        public virtual int MF_DeleteOpMachine(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MF_DeleteOpMachine", idParameter);
        }
    
        public virtual int MF_DeletePart(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MF_DeletePart", idParameter);
        }
    
        public virtual int MF_DeleteProcess(Nullable<int> idprocess, Nullable<int> op)
        {
            var idprocessParameter = idprocess.HasValue ?
                new ObjectParameter("idprocess", idprocess) :
                new ObjectParameter("idprocess", typeof(int));
    
            var opParameter = op.HasValue ?
                new ObjectParameter("op", op) :
                new ObjectParameter("op", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MF_DeleteProcess", idprocessParameter, opParameter);
        }
    
        public virtual ObjectResult<MF_Porcentaje_Customer_Result> MF_Porcentaje_Customer(Nullable<double> industrial, Nullable<double> medical, Nullable<double> provee1, Nullable<double> provee2, Nullable<int> mes, Nullable<int> año, Nullable<double> turnindustrial, Nullable<double> turnomedical, Nullable<double> turnoprovee1, Nullable<double> turnoprovee2, Nullable<int> proceso)
        {
            var industrialParameter = industrial.HasValue ?
                new ObjectParameter("industrial", industrial) :
                new ObjectParameter("industrial", typeof(double));
    
            var medicalParameter = medical.HasValue ?
                new ObjectParameter("medical", medical) :
                new ObjectParameter("medical", typeof(double));
    
            var provee1Parameter = provee1.HasValue ?
                new ObjectParameter("provee1", provee1) :
                new ObjectParameter("provee1", typeof(double));
    
            var provee2Parameter = provee2.HasValue ?
                new ObjectParameter("provee2", provee2) :
                new ObjectParameter("provee2", typeof(double));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("año", año) :
                new ObjectParameter("año", typeof(int));
    
            var turnindustrialParameter = turnindustrial.HasValue ?
                new ObjectParameter("turnindustrial", turnindustrial) :
                new ObjectParameter("turnindustrial", typeof(double));
    
            var turnomedicalParameter = turnomedical.HasValue ?
                new ObjectParameter("turnomedical", turnomedical) :
                new ObjectParameter("turnomedical", typeof(double));
    
            var turnoprovee1Parameter = turnoprovee1.HasValue ?
                new ObjectParameter("turnoprovee1", turnoprovee1) :
                new ObjectParameter("turnoprovee1", typeof(double));
    
            var turnoprovee2Parameter = turnoprovee2.HasValue ?
                new ObjectParameter("turnoprovee2", turnoprovee2) :
                new ObjectParameter("turnoprovee2", typeof(double));
    
            var procesoParameter = proceso.HasValue ?
                new ObjectParameter("proceso", proceso) :
                new ObjectParameter("proceso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MF_Porcentaje_Customer_Result>("MF_Porcentaje_Customer", industrialParameter, medicalParameter, provee1Parameter, provee2Parameter, mesParameter, añoParameter, turnindustrialParameter, turnomedicalParameter, turnoprovee1Parameter, turnoprovee2Parameter, procesoParameter);
        }
    
        public virtual ObjectResult<MF_Porcentaje_Demanda_Result> MF_Porcentaje_Demanda(Nullable<double> industrial, Nullable<double> medical, Nullable<double> provee1, Nullable<double> provee2, Nullable<int> mes, Nullable<int> año, Nullable<double> turnindustrial, Nullable<double> turnomedical, Nullable<double> turnoprovee1, Nullable<double> turnoprovee2, Nullable<int> proceso)
        {
            var industrialParameter = industrial.HasValue ?
                new ObjectParameter("industrial", industrial) :
                new ObjectParameter("industrial", typeof(double));
    
            var medicalParameter = medical.HasValue ?
                new ObjectParameter("medical", medical) :
                new ObjectParameter("medical", typeof(double));
    
            var provee1Parameter = provee1.HasValue ?
                new ObjectParameter("provee1", provee1) :
                new ObjectParameter("provee1", typeof(double));
    
            var provee2Parameter = provee2.HasValue ?
                new ObjectParameter("provee2", provee2) :
                new ObjectParameter("provee2", typeof(double));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("año", año) :
                new ObjectParameter("año", typeof(int));
    
            var turnindustrialParameter = turnindustrial.HasValue ?
                new ObjectParameter("turnindustrial", turnindustrial) :
                new ObjectParameter("turnindustrial", typeof(double));
    
            var turnomedicalParameter = turnomedical.HasValue ?
                new ObjectParameter("turnomedical", turnomedical) :
                new ObjectParameter("turnomedical", typeof(double));
    
            var turnoprovee1Parameter = turnoprovee1.HasValue ?
                new ObjectParameter("turnoprovee1", turnoprovee1) :
                new ObjectParameter("turnoprovee1", typeof(double));
    
            var turnoprovee2Parameter = turnoprovee2.HasValue ?
                new ObjectParameter("turnoprovee2", turnoprovee2) :
                new ObjectParameter("turnoprovee2", typeof(double));
    
            var procesoParameter = proceso.HasValue ?
                new ObjectParameter("proceso", proceso) :
                new ObjectParameter("proceso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MF_Porcentaje_Demanda_Result>("MF_Porcentaje_Demanda", industrialParameter, medicalParameter, provee1Parameter, provee2Parameter, mesParameter, añoParameter, turnindustrialParameter, turnomedicalParameter, turnoprovee1Parameter, turnoprovee2Parameter, procesoParameter);
        }
    
        public virtual ObjectResult<MF_Porcentaje_Maquina_Result> MF_Porcentaje_Maquina(Nullable<double> industrial, Nullable<double> medical, Nullable<double> provee1, Nullable<double> provee2, Nullable<int> mes, Nullable<int> año, Nullable<double> turnindustrial, Nullable<double> turnomedical, Nullable<double> turnoprovee1, Nullable<double> turnoprovee2, Nullable<int> proceso)
        {
            var industrialParameter = industrial.HasValue ?
                new ObjectParameter("industrial", industrial) :
                new ObjectParameter("industrial", typeof(double));
    
            var medicalParameter = medical.HasValue ?
                new ObjectParameter("medical", medical) :
                new ObjectParameter("medical", typeof(double));
    
            var provee1Parameter = provee1.HasValue ?
                new ObjectParameter("provee1", provee1) :
                new ObjectParameter("provee1", typeof(double));
    
            var provee2Parameter = provee2.HasValue ?
                new ObjectParameter("provee2", provee2) :
                new ObjectParameter("provee2", typeof(double));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("año", año) :
                new ObjectParameter("año", typeof(int));
    
            var turnindustrialParameter = turnindustrial.HasValue ?
                new ObjectParameter("turnindustrial", turnindustrial) :
                new ObjectParameter("turnindustrial", typeof(double));
    
            var turnomedicalParameter = turnomedical.HasValue ?
                new ObjectParameter("turnomedical", turnomedical) :
                new ObjectParameter("turnomedical", typeof(double));
    
            var turnoprovee1Parameter = turnoprovee1.HasValue ?
                new ObjectParameter("turnoprovee1", turnoprovee1) :
                new ObjectParameter("turnoprovee1", typeof(double));
    
            var turnoprovee2Parameter = turnoprovee2.HasValue ?
                new ObjectParameter("turnoprovee2", turnoprovee2) :
                new ObjectParameter("turnoprovee2", typeof(double));
    
            var procesoParameter = proceso.HasValue ?
                new ObjectParameter("proceso", proceso) :
                new ObjectParameter("proceso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MF_Porcentaje_Maquina_Result>("MF_Porcentaje_Maquina", industrialParameter, medicalParameter, provee1Parameter, provee2Parameter, mesParameter, añoParameter, turnindustrialParameter, turnomedicalParameter, turnoprovee1Parameter, turnoprovee2Parameter, procesoParameter);
        }
    
        public virtual ObjectResult<MF_Porcentaje_Proceso_Result> MF_Porcentaje_Proceso(Nullable<double> industrial, Nullable<double> medical, Nullable<double> provee1, Nullable<double> provee2, Nullable<int> mes, Nullable<int> año, Nullable<double> turnindustrial, Nullable<double> turnomedical, Nullable<double> turnoprovee1, Nullable<double> turnoprovee2)
        {
            var industrialParameter = industrial.HasValue ?
                new ObjectParameter("industrial", industrial) :
                new ObjectParameter("industrial", typeof(double));
    
            var medicalParameter = medical.HasValue ?
                new ObjectParameter("medical", medical) :
                new ObjectParameter("medical", typeof(double));
    
            var provee1Parameter = provee1.HasValue ?
                new ObjectParameter("provee1", provee1) :
                new ObjectParameter("provee1", typeof(double));
    
            var provee2Parameter = provee2.HasValue ?
                new ObjectParameter("provee2", provee2) :
                new ObjectParameter("provee2", typeof(double));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("mes", mes) :
                new ObjectParameter("mes", typeof(int));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("año", año) :
                new ObjectParameter("año", typeof(int));
    
            var turnindustrialParameter = turnindustrial.HasValue ?
                new ObjectParameter("turnindustrial", turnindustrial) :
                new ObjectParameter("turnindustrial", typeof(double));
    
            var turnomedicalParameter = turnomedical.HasValue ?
                new ObjectParameter("turnomedical", turnomedical) :
                new ObjectParameter("turnomedical", typeof(double));
    
            var turnoprovee1Parameter = turnoprovee1.HasValue ?
                new ObjectParameter("turnoprovee1", turnoprovee1) :
                new ObjectParameter("turnoprovee1", typeof(double));
    
            var turnoprovee2Parameter = turnoprovee2.HasValue ?
                new ObjectParameter("turnoprovee2", turnoprovee2) :
                new ObjectParameter("turnoprovee2", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MF_Porcentaje_Proceso_Result>("MF_Porcentaje_Proceso", industrialParameter, medicalParameter, provee1Parameter, provee2Parameter, mesParameter, añoParameter, turnindustrialParameter, turnomedicalParameter, turnoprovee1Parameter, turnoprovee2Parameter);
        }
    
        public virtual ObjectResult<MF_Porcentaje_Proceso_Nuevo_Result> MF_Porcentaje_Proceso_Nuevo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MF_Porcentaje_Proceso_Nuevo_Result>("MF_Porcentaje_Proceso_Nuevo");
        }
    
        public virtual ObjectResult<MF_Porcentaje_Tres_Meses_Result> MF_Porcentaje_Tres_Meses(Nullable<int> mes1, Nullable<int> mes2, Nullable<int> mes3, Nullable<int> anio1, Nullable<int> anio2, Nullable<int> anio3, Nullable<double> dia1, Nullable<double> dia2, Nullable<double> dia3, Nullable<double> turno1, Nullable<double> turno2, Nullable<double> turno3, Nullable<int> proceso)
        {
            var mes1Parameter = mes1.HasValue ?
                new ObjectParameter("mes1", mes1) :
                new ObjectParameter("mes1", typeof(int));
    
            var mes2Parameter = mes2.HasValue ?
                new ObjectParameter("mes2", mes2) :
                new ObjectParameter("mes2", typeof(int));
    
            var mes3Parameter = mes3.HasValue ?
                new ObjectParameter("mes3", mes3) :
                new ObjectParameter("mes3", typeof(int));
    
            var anio1Parameter = anio1.HasValue ?
                new ObjectParameter("anio1", anio1) :
                new ObjectParameter("anio1", typeof(int));
    
            var anio2Parameter = anio2.HasValue ?
                new ObjectParameter("anio2", anio2) :
                new ObjectParameter("anio2", typeof(int));
    
            var anio3Parameter = anio3.HasValue ?
                new ObjectParameter("anio3", anio3) :
                new ObjectParameter("anio3", typeof(int));
    
            var dia1Parameter = dia1.HasValue ?
                new ObjectParameter("dia1", dia1) :
                new ObjectParameter("dia1", typeof(double));
    
            var dia2Parameter = dia2.HasValue ?
                new ObjectParameter("dia2", dia2) :
                new ObjectParameter("dia2", typeof(double));
    
            var dia3Parameter = dia3.HasValue ?
                new ObjectParameter("dia3", dia3) :
                new ObjectParameter("dia3", typeof(double));
    
            var turno1Parameter = turno1.HasValue ?
                new ObjectParameter("turno1", turno1) :
                new ObjectParameter("turno1", typeof(double));
    
            var turno2Parameter = turno2.HasValue ?
                new ObjectParameter("turno2", turno2) :
                new ObjectParameter("turno2", typeof(double));
    
            var turno3Parameter = turno3.HasValue ?
                new ObjectParameter("turno3", turno3) :
                new ObjectParameter("turno3", typeof(double));
    
            var procesoParameter = proceso.HasValue ?
                new ObjectParameter("proceso", proceso) :
                new ObjectParameter("proceso", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MF_Porcentaje_Tres_Meses_Result>("MF_Porcentaje_Tres_Meses", mes1Parameter, mes2Parameter, mes3Parameter, anio1Parameter, anio2Parameter, anio3Parameter, dia1Parameter, dia2Parameter, dia3Parameter, turno1Parameter, turno2Parameter, turno3Parameter, procesoParameter);
        }
    }
}
